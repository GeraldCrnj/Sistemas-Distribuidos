// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: bountyhuntersunderworld.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BountyhuntersUnderworldService_SellPirate_FullMethodName                     = "/bountyhuntersunderworld.BountyhuntersUnderworldService/SellPirate"
	BountyhuntersUnderworldService_IsUnderworldSendingMercenaries_FullMethodName = "/bountyhuntersunderworld.BountyhuntersUnderworldService/IsUnderworldSendingMercenaries"
)

// BountyhuntersUnderworldServiceClient is the client API for BountyhuntersUnderworldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BountyhuntersUnderworldServiceClient interface {
	SellPirate(ctx context.Context, in *SellUnderworldRequest, opts ...grpc.CallOption) (*SellUnderworldResponse, error)
	IsUnderworldSendingMercenaries(ctx context.Context, in *PirateRequest, opts ...grpc.CallOption) (*SendingMercenariesResponse, error)
}

type bountyhuntersUnderworldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBountyhuntersUnderworldServiceClient(cc grpc.ClientConnInterface) BountyhuntersUnderworldServiceClient {
	return &bountyhuntersUnderworldServiceClient{cc}
}

func (c *bountyhuntersUnderworldServiceClient) SellPirate(ctx context.Context, in *SellUnderworldRequest, opts ...grpc.CallOption) (*SellUnderworldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SellUnderworldResponse)
	err := c.cc.Invoke(ctx, BountyhuntersUnderworldService_SellPirate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bountyhuntersUnderworldServiceClient) IsUnderworldSendingMercenaries(ctx context.Context, in *PirateRequest, opts ...grpc.CallOption) (*SendingMercenariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendingMercenariesResponse)
	err := c.cc.Invoke(ctx, BountyhuntersUnderworldService_IsUnderworldSendingMercenaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BountyhuntersUnderworldServiceServer is the server API for BountyhuntersUnderworldService service.
// All implementations must embed UnimplementedBountyhuntersUnderworldServiceServer
// for forward compatibility.
type BountyhuntersUnderworldServiceServer interface {
	SellPirate(context.Context, *SellUnderworldRequest) (*SellUnderworldResponse, error)
	IsUnderworldSendingMercenaries(context.Context, *PirateRequest) (*SendingMercenariesResponse, error)
	mustEmbedUnimplementedBountyhuntersUnderworldServiceServer()
}

// UnimplementedBountyhuntersUnderworldServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBountyhuntersUnderworldServiceServer struct{}

func (UnimplementedBountyhuntersUnderworldServiceServer) SellPirate(context.Context, *SellUnderworldRequest) (*SellUnderworldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellPirate not implemented")
}
func (UnimplementedBountyhuntersUnderworldServiceServer) IsUnderworldSendingMercenaries(context.Context, *PirateRequest) (*SendingMercenariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUnderworldSendingMercenaries not implemented")
}
func (UnimplementedBountyhuntersUnderworldServiceServer) mustEmbedUnimplementedBountyhuntersUnderworldServiceServer() {
}
func (UnimplementedBountyhuntersUnderworldServiceServer) testEmbeddedByValue() {}

// UnsafeBountyhuntersUnderworldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BountyhuntersUnderworldServiceServer will
// result in compilation errors.
type UnsafeBountyhuntersUnderworldServiceServer interface {
	mustEmbedUnimplementedBountyhuntersUnderworldServiceServer()
}

func RegisterBountyhuntersUnderworldServiceServer(s grpc.ServiceRegistrar, srv BountyhuntersUnderworldServiceServer) {
	// If the following call pancis, it indicates UnimplementedBountyhuntersUnderworldServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BountyhuntersUnderworldService_ServiceDesc, srv)
}

func _BountyhuntersUnderworldService_SellPirate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellUnderworldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BountyhuntersUnderworldServiceServer).SellPirate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BountyhuntersUnderworldService_SellPirate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BountyhuntersUnderworldServiceServer).SellPirate(ctx, req.(*SellUnderworldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BountyhuntersUnderworldService_IsUnderworldSendingMercenaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PirateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BountyhuntersUnderworldServiceServer).IsUnderworldSendingMercenaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BountyhuntersUnderworldService_IsUnderworldSendingMercenaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BountyhuntersUnderworldServiceServer).IsUnderworldSendingMercenaries(ctx, req.(*PirateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BountyhuntersUnderworldService_ServiceDesc is the grpc.ServiceDesc for BountyhuntersUnderworldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BountyhuntersUnderworldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bountyhuntersunderworld.BountyhuntersUnderworldService",
	HandlerType: (*BountyhuntersUnderworldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SellPirate",
			Handler:    _BountyhuntersUnderworldService_SellPirate_Handler,
		},
		{
			MethodName: "IsUnderworldSendingMercenaries",
			Handler:    _BountyhuntersUnderworldService_IsUnderworldSendingMercenaries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bountyhuntersunderworld.proto",
}
