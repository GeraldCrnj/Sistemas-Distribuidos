// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: bountyhuntersgovernment.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bountyhuntersgovernment_GetWantedPirates_FullMethodName     = "/bountyhuntersgovernment.Bountyhuntersgovernment/GetWantedPirates"
	Bountyhuntersgovernment_SendCaptureReport_FullMethodName    = "/bountyhuntersgovernment.Bountyhuntersgovernment/SendCaptureReport"
	Bountyhuntersgovernment_AssignBountyhunterId_FullMethodName = "/bountyhuntersgovernment.Bountyhuntersgovernment/AssignBountyhunterId"
)

// BountyhuntersgovernmentClient is the client API for Bountyhuntersgovernment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BountyhuntersgovernmentClient interface {
	GetWantedPirates(ctx context.Context, in *GetWantedPiratesRequest, opts ...grpc.CallOption) (*GetWantedPiratesResponse, error)
	SendCaptureReport(ctx context.Context, in *SendCaptureReportRequest, opts ...grpc.CallOption) (*SendCaptureReportResponse, error)
	AssignBountyhunterId(ctx context.Context, in *AssignBountyhunterIdRequest, opts ...grpc.CallOption) (*AssignBountyhunterIdResponse, error)
}

type bountyhuntersgovernmentClient struct {
	cc grpc.ClientConnInterface
}

func NewBountyhuntersgovernmentClient(cc grpc.ClientConnInterface) BountyhuntersgovernmentClient {
	return &bountyhuntersgovernmentClient{cc}
}

func (c *bountyhuntersgovernmentClient) GetWantedPirates(ctx context.Context, in *GetWantedPiratesRequest, opts ...grpc.CallOption) (*GetWantedPiratesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWantedPiratesResponse)
	err := c.cc.Invoke(ctx, Bountyhuntersgovernment_GetWantedPirates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bountyhuntersgovernmentClient) SendCaptureReport(ctx context.Context, in *SendCaptureReportRequest, opts ...grpc.CallOption) (*SendCaptureReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCaptureReportResponse)
	err := c.cc.Invoke(ctx, Bountyhuntersgovernment_SendCaptureReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bountyhuntersgovernmentClient) AssignBountyhunterId(ctx context.Context, in *AssignBountyhunterIdRequest, opts ...grpc.CallOption) (*AssignBountyhunterIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignBountyhunterIdResponse)
	err := c.cc.Invoke(ctx, Bountyhuntersgovernment_AssignBountyhunterId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BountyhuntersgovernmentServer is the server API for Bountyhuntersgovernment service.
// All implementations must embed UnimplementedBountyhuntersgovernmentServer
// for forward compatibility.
type BountyhuntersgovernmentServer interface {
	GetWantedPirates(context.Context, *GetWantedPiratesRequest) (*GetWantedPiratesResponse, error)
	SendCaptureReport(context.Context, *SendCaptureReportRequest) (*SendCaptureReportResponse, error)
	AssignBountyhunterId(context.Context, *AssignBountyhunterIdRequest) (*AssignBountyhunterIdResponse, error)
	mustEmbedUnimplementedBountyhuntersgovernmentServer()
}

// UnimplementedBountyhuntersgovernmentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBountyhuntersgovernmentServer struct{}

func (UnimplementedBountyhuntersgovernmentServer) GetWantedPirates(context.Context, *GetWantedPiratesRequest) (*GetWantedPiratesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWantedPirates not implemented")
}
func (UnimplementedBountyhuntersgovernmentServer) SendCaptureReport(context.Context, *SendCaptureReportRequest) (*SendCaptureReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCaptureReport not implemented")
}
func (UnimplementedBountyhuntersgovernmentServer) AssignBountyhunterId(context.Context, *AssignBountyhunterIdRequest) (*AssignBountyhunterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignBountyhunterId not implemented")
}
func (UnimplementedBountyhuntersgovernmentServer) mustEmbedUnimplementedBountyhuntersgovernmentServer() {
}
func (UnimplementedBountyhuntersgovernmentServer) testEmbeddedByValue() {}

// UnsafeBountyhuntersgovernmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BountyhuntersgovernmentServer will
// result in compilation errors.
type UnsafeBountyhuntersgovernmentServer interface {
	mustEmbedUnimplementedBountyhuntersgovernmentServer()
}

func RegisterBountyhuntersgovernmentServer(s grpc.ServiceRegistrar, srv BountyhuntersgovernmentServer) {
	// If the following call pancis, it indicates UnimplementedBountyhuntersgovernmentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bountyhuntersgovernment_ServiceDesc, srv)
}

func _Bountyhuntersgovernment_GetWantedPirates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWantedPiratesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BountyhuntersgovernmentServer).GetWantedPirates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bountyhuntersgovernment_GetWantedPirates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BountyhuntersgovernmentServer).GetWantedPirates(ctx, req.(*GetWantedPiratesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bountyhuntersgovernment_SendCaptureReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCaptureReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BountyhuntersgovernmentServer).SendCaptureReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bountyhuntersgovernment_SendCaptureReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BountyhuntersgovernmentServer).SendCaptureReport(ctx, req.(*SendCaptureReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bountyhuntersgovernment_AssignBountyhunterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignBountyhunterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BountyhuntersgovernmentServer).AssignBountyhunterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bountyhuntersgovernment_AssignBountyhunterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BountyhuntersgovernmentServer).AssignBountyhunterId(ctx, req.(*AssignBountyhunterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bountyhuntersgovernment_ServiceDesc is the grpc.ServiceDesc for Bountyhuntersgovernment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bountyhuntersgovernment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bountyhuntersgovernment.Bountyhuntersgovernment",
	HandlerType: (*BountyhuntersgovernmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWantedPirates",
			Handler:    _Bountyhuntersgovernment_GetWantedPirates_Handler,
		},
		{
			MethodName: "SendCaptureReport",
			Handler:    _Bountyhuntersgovernment_SendCaptureReport_Handler,
		},
		{
			MethodName: "AssignBountyhunterId",
			Handler:    _Bountyhuntersgovernment_AssignBountyhunterId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bountyhuntersgovernment.proto",
}
