// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: bountyhuntersmarine.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BountyhuntersMarineService_SellPirate_FullMethodName                 = "/bountyhuntersmarine.BountyhuntersMarineService/SellPirate"
	BountyhuntersMarineService_IsMarineConfiscatingPirate_FullMethodName = "/bountyhuntersmarine.BountyhuntersMarineService/IsMarineConfiscatingPirate"
)

// BountyhuntersMarineServiceClient is the client API for BountyhuntersMarineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BountyhuntersMarineServiceClient interface {
	SellPirate(ctx context.Context, in *SellMarineRequest, opts ...grpc.CallOption) (*SellMarineResponse, error)
	IsMarineConfiscatingPirate(ctx context.Context, in *MarineConfiscatingRequest, opts ...grpc.CallOption) (*MarineConfiscatingResponse, error)
}

type bountyhuntersMarineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBountyhuntersMarineServiceClient(cc grpc.ClientConnInterface) BountyhuntersMarineServiceClient {
	return &bountyhuntersMarineServiceClient{cc}
}

func (c *bountyhuntersMarineServiceClient) SellPirate(ctx context.Context, in *SellMarineRequest, opts ...grpc.CallOption) (*SellMarineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SellMarineResponse)
	err := c.cc.Invoke(ctx, BountyhuntersMarineService_SellPirate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bountyhuntersMarineServiceClient) IsMarineConfiscatingPirate(ctx context.Context, in *MarineConfiscatingRequest, opts ...grpc.CallOption) (*MarineConfiscatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarineConfiscatingResponse)
	err := c.cc.Invoke(ctx, BountyhuntersMarineService_IsMarineConfiscatingPirate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BountyhuntersMarineServiceServer is the server API for BountyhuntersMarineService service.
// All implementations must embed UnimplementedBountyhuntersMarineServiceServer
// for forward compatibility.
type BountyhuntersMarineServiceServer interface {
	SellPirate(context.Context, *SellMarineRequest) (*SellMarineResponse, error)
	IsMarineConfiscatingPirate(context.Context, *MarineConfiscatingRequest) (*MarineConfiscatingResponse, error)
	mustEmbedUnimplementedBountyhuntersMarineServiceServer()
}

// UnimplementedBountyhuntersMarineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBountyhuntersMarineServiceServer struct{}

func (UnimplementedBountyhuntersMarineServiceServer) SellPirate(context.Context, *SellMarineRequest) (*SellMarineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellPirate not implemented")
}
func (UnimplementedBountyhuntersMarineServiceServer) IsMarineConfiscatingPirate(context.Context, *MarineConfiscatingRequest) (*MarineConfiscatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMarineConfiscatingPirate not implemented")
}
func (UnimplementedBountyhuntersMarineServiceServer) mustEmbedUnimplementedBountyhuntersMarineServiceServer() {
}
func (UnimplementedBountyhuntersMarineServiceServer) testEmbeddedByValue() {}

// UnsafeBountyhuntersMarineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BountyhuntersMarineServiceServer will
// result in compilation errors.
type UnsafeBountyhuntersMarineServiceServer interface {
	mustEmbedUnimplementedBountyhuntersMarineServiceServer()
}

func RegisterBountyhuntersMarineServiceServer(s grpc.ServiceRegistrar, srv BountyhuntersMarineServiceServer) {
	// If the following call pancis, it indicates UnimplementedBountyhuntersMarineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BountyhuntersMarineService_ServiceDesc, srv)
}

func _BountyhuntersMarineService_SellPirate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellMarineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BountyhuntersMarineServiceServer).SellPirate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BountyhuntersMarineService_SellPirate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BountyhuntersMarineServiceServer).SellPirate(ctx, req.(*SellMarineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BountyhuntersMarineService_IsMarineConfiscatingPirate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarineConfiscatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BountyhuntersMarineServiceServer).IsMarineConfiscatingPirate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BountyhuntersMarineService_IsMarineConfiscatingPirate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BountyhuntersMarineServiceServer).IsMarineConfiscatingPirate(ctx, req.(*MarineConfiscatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BountyhuntersMarineService_ServiceDesc is the grpc.ServiceDesc for BountyhuntersMarineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BountyhuntersMarineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bountyhuntersmarine.BountyhuntersMarineService",
	HandlerType: (*BountyhuntersMarineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SellPirate",
			Handler:    _BountyhuntersMarineService_SellPirate_Handler,
		},
		{
			MethodName: "IsMarineConfiscatingPirate",
			Handler:    _BountyhuntersMarineService_IsMarineConfiscatingPirate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bountyhuntersmarine.proto",
}
