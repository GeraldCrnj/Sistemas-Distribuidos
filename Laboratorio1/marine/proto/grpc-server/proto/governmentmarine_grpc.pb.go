// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: governmentmarine.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GovernmentMarine_SendMarineCaptureReport_FullMethodName         = "/governmentmarine.GovernmentMarine/SendMarineCaptureReport"
	GovernmentMarine_AlertMarine_FullMethodName                     = "/governmentmarine.GovernmentMarine/AlertMarine"
	GovernmentMarine_GetWantedPiratesFromMarine_FullMethodName      = "/governmentmarine.GovernmentMarine/GetWantedPiratesFromMarine"
	GovernmentMarine_GetBountyHunterReputation_FullMethodName       = "/governmentmarine.GovernmentMarine/GetBountyHunterReputation"
	GovernmentMarine_CheckIfTooManySellsToUnderworld_FullMethodName = "/governmentmarine.GovernmentMarine/CheckIfTooManySellsToUnderworld"
)

// GovernmentMarineClient is the client API for GovernmentMarine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GovernmentMarineClient interface {
	SendMarineCaptureReport(ctx context.Context, in *SendMarineCaptureReportRequest, opts ...grpc.CallOption) (*SendMarineCaptureReportResponse, error)
	AlertMarine(ctx context.Context, in *AlertMarineRequest, opts ...grpc.CallOption) (*AlertMarineResponse, error)
	GetWantedPiratesFromMarine(ctx context.Context, in *GetWantedPiratesFromMarineRequest, opts ...grpc.CallOption) (*GetWantedPiratesFromMarineResponse, error)
	GetBountyHunterReputation(ctx context.Context, in *BountyHunterReputationRequest, opts ...grpc.CallOption) (*BountyHunterReputationResponse, error)
	CheckIfTooManySellsToUnderworld(ctx context.Context, in *TooManySellsRequest, opts ...grpc.CallOption) (*TooManySellsResponse, error)
}

type governmentMarineClient struct {
	cc grpc.ClientConnInterface
}

func NewGovernmentMarineClient(cc grpc.ClientConnInterface) GovernmentMarineClient {
	return &governmentMarineClient{cc}
}

func (c *governmentMarineClient) SendMarineCaptureReport(ctx context.Context, in *SendMarineCaptureReportRequest, opts ...grpc.CallOption) (*SendMarineCaptureReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMarineCaptureReportResponse)
	err := c.cc.Invoke(ctx, GovernmentMarine_SendMarineCaptureReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governmentMarineClient) AlertMarine(ctx context.Context, in *AlertMarineRequest, opts ...grpc.CallOption) (*AlertMarineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertMarineResponse)
	err := c.cc.Invoke(ctx, GovernmentMarine_AlertMarine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governmentMarineClient) GetWantedPiratesFromMarine(ctx context.Context, in *GetWantedPiratesFromMarineRequest, opts ...grpc.CallOption) (*GetWantedPiratesFromMarineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWantedPiratesFromMarineResponse)
	err := c.cc.Invoke(ctx, GovernmentMarine_GetWantedPiratesFromMarine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governmentMarineClient) GetBountyHunterReputation(ctx context.Context, in *BountyHunterReputationRequest, opts ...grpc.CallOption) (*BountyHunterReputationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BountyHunterReputationResponse)
	err := c.cc.Invoke(ctx, GovernmentMarine_GetBountyHunterReputation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governmentMarineClient) CheckIfTooManySellsToUnderworld(ctx context.Context, in *TooManySellsRequest, opts ...grpc.CallOption) (*TooManySellsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TooManySellsResponse)
	err := c.cc.Invoke(ctx, GovernmentMarine_CheckIfTooManySellsToUnderworld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GovernmentMarineServer is the server API for GovernmentMarine service.
// All implementations must embed UnimplementedGovernmentMarineServer
// for forward compatibility.
type GovernmentMarineServer interface {
	SendMarineCaptureReport(context.Context, *SendMarineCaptureReportRequest) (*SendMarineCaptureReportResponse, error)
	AlertMarine(context.Context, *AlertMarineRequest) (*AlertMarineResponse, error)
	GetWantedPiratesFromMarine(context.Context, *GetWantedPiratesFromMarineRequest) (*GetWantedPiratesFromMarineResponse, error)
	GetBountyHunterReputation(context.Context, *BountyHunterReputationRequest) (*BountyHunterReputationResponse, error)
	CheckIfTooManySellsToUnderworld(context.Context, *TooManySellsRequest) (*TooManySellsResponse, error)
	mustEmbedUnimplementedGovernmentMarineServer()
}

// UnimplementedGovernmentMarineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGovernmentMarineServer struct{}

func (UnimplementedGovernmentMarineServer) SendMarineCaptureReport(context.Context, *SendMarineCaptureReportRequest) (*SendMarineCaptureReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMarineCaptureReport not implemented")
}
func (UnimplementedGovernmentMarineServer) AlertMarine(context.Context, *AlertMarineRequest) (*AlertMarineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertMarine not implemented")
}
func (UnimplementedGovernmentMarineServer) GetWantedPiratesFromMarine(context.Context, *GetWantedPiratesFromMarineRequest) (*GetWantedPiratesFromMarineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWantedPiratesFromMarine not implemented")
}
func (UnimplementedGovernmentMarineServer) GetBountyHunterReputation(context.Context, *BountyHunterReputationRequest) (*BountyHunterReputationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBountyHunterReputation not implemented")
}
func (UnimplementedGovernmentMarineServer) CheckIfTooManySellsToUnderworld(context.Context, *TooManySellsRequest) (*TooManySellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfTooManySellsToUnderworld not implemented")
}
func (UnimplementedGovernmentMarineServer) mustEmbedUnimplementedGovernmentMarineServer() {}
func (UnimplementedGovernmentMarineServer) testEmbeddedByValue()                          {}

// UnsafeGovernmentMarineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GovernmentMarineServer will
// result in compilation errors.
type UnsafeGovernmentMarineServer interface {
	mustEmbedUnimplementedGovernmentMarineServer()
}

func RegisterGovernmentMarineServer(s grpc.ServiceRegistrar, srv GovernmentMarineServer) {
	// If the following call pancis, it indicates UnimplementedGovernmentMarineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GovernmentMarine_ServiceDesc, srv)
}

func _GovernmentMarine_SendMarineCaptureReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMarineCaptureReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernmentMarineServer).SendMarineCaptureReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernmentMarine_SendMarineCaptureReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernmentMarineServer).SendMarineCaptureReport(ctx, req.(*SendMarineCaptureReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernmentMarine_AlertMarine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertMarineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernmentMarineServer).AlertMarine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernmentMarine_AlertMarine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernmentMarineServer).AlertMarine(ctx, req.(*AlertMarineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernmentMarine_GetWantedPiratesFromMarine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWantedPiratesFromMarineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernmentMarineServer).GetWantedPiratesFromMarine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernmentMarine_GetWantedPiratesFromMarine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernmentMarineServer).GetWantedPiratesFromMarine(ctx, req.(*GetWantedPiratesFromMarineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernmentMarine_GetBountyHunterReputation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BountyHunterReputationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernmentMarineServer).GetBountyHunterReputation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernmentMarine_GetBountyHunterReputation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernmentMarineServer).GetBountyHunterReputation(ctx, req.(*BountyHunterReputationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernmentMarine_CheckIfTooManySellsToUnderworld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TooManySellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernmentMarineServer).CheckIfTooManySellsToUnderworld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernmentMarine_CheckIfTooManySellsToUnderworld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernmentMarineServer).CheckIfTooManySellsToUnderworld(ctx, req.(*TooManySellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GovernmentMarine_ServiceDesc is the grpc.ServiceDesc for GovernmentMarine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GovernmentMarine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "governmentmarine.GovernmentMarine",
	HandlerType: (*GovernmentMarineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMarineCaptureReport",
			Handler:    _GovernmentMarine_SendMarineCaptureReport_Handler,
		},
		{
			MethodName: "AlertMarine",
			Handler:    _GovernmentMarine_AlertMarine_Handler,
		},
		{
			MethodName: "GetWantedPiratesFromMarine",
			Handler:    _GovernmentMarine_GetWantedPiratesFromMarine_Handler,
		},
		{
			MethodName: "GetBountyHunterReputation",
			Handler:    _GovernmentMarine_GetBountyHunterReputation_Handler,
		},
		{
			MethodName: "CheckIfTooManySellsToUnderworld",
			Handler:    _GovernmentMarine_CheckIfTooManySellsToUnderworld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "governmentmarine.proto",
}
