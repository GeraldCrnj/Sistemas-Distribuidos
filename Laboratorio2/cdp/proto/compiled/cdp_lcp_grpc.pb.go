// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: proto/cdp_lcp.proto

package compiled

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CDP_LCP_ValidarEntrenadores_FullMethodName = "/cdp_lcp.CDP_LCP/ValidarEntrenadores"
)

// CDP_LCPClient is the client API for CDP_LCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio LCP con el método de validación de entrenadores
type CDP_LCPClient interface {
	ValidarEntrenadores(ctx context.Context, in *ValidarEntrenadoresRequest, opts ...grpc.CallOption) (*ValidarEntrenadoresResponse, error)
}

type cDP_LCPClient struct {
	cc grpc.ClientConnInterface
}

func NewCDP_LCPClient(cc grpc.ClientConnInterface) CDP_LCPClient {
	return &cDP_LCPClient{cc}
}

func (c *cDP_LCPClient) ValidarEntrenadores(ctx context.Context, in *ValidarEntrenadoresRequest, opts ...grpc.CallOption) (*ValidarEntrenadoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidarEntrenadoresResponse)
	err := c.cc.Invoke(ctx, CDP_LCP_ValidarEntrenadores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDP_LCPServer is the server API for CDP_LCP service.
// All implementations must embed UnimplementedCDP_LCPServer
// for forward compatibility.
//
// Servicio LCP con el método de validación de entrenadores
type CDP_LCPServer interface {
	ValidarEntrenadores(context.Context, *ValidarEntrenadoresRequest) (*ValidarEntrenadoresResponse, error)
	mustEmbedUnimplementedCDP_LCPServer()
}

// UnimplementedCDP_LCPServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCDP_LCPServer struct{}

func (UnimplementedCDP_LCPServer) ValidarEntrenadores(context.Context, *ValidarEntrenadoresRequest) (*ValidarEntrenadoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidarEntrenadores not implemented")
}
func (UnimplementedCDP_LCPServer) mustEmbedUnimplementedCDP_LCPServer() {}
func (UnimplementedCDP_LCPServer) testEmbeddedByValue()                 {}

// UnsafeCDP_LCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CDP_LCPServer will
// result in compilation errors.
type UnsafeCDP_LCPServer interface {
	mustEmbedUnimplementedCDP_LCPServer()
}

func RegisterCDP_LCPServer(s grpc.ServiceRegistrar, srv CDP_LCPServer) {
	// If the following call pancis, it indicates UnimplementedCDP_LCPServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CDP_LCP_ServiceDesc, srv)
}

func _CDP_LCP_ValidarEntrenadores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidarEntrenadoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDP_LCPServer).ValidarEntrenadores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDP_LCP_ValidarEntrenadores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDP_LCPServer).ValidarEntrenadores(ctx, req.(*ValidarEntrenadoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CDP_LCP_ServiceDesc is the grpc.ServiceDesc for CDP_LCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CDP_LCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cdp_lcp.CDP_LCP",
	HandlerType: (*CDP_LCPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidarEntrenadores",
			Handler:    _CDP_LCP_ValidarEntrenadores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cdp_lcp.proto",
}
