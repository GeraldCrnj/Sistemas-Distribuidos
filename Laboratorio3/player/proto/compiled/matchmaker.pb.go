// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: player/proto/matchmaker.proto

package compiled

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mensajes del jugador
type PlayerInfoRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PlayerId           string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameModePreference string                 `protobuf:"bytes,2,opt,name=game_mode_preference,json=gameModePreference,proto3" json:"game_mode_preference,omitempty"`
	VectorClock        map[string]int32       `protobuf:"bytes,3,rep,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PlayerInfoRequest) Reset() {
	*x = PlayerInfoRequest{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfoRequest) ProtoMessage() {}

func (x *PlayerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfoRequest.ProtoReflect.Descriptor instead.
func (*PlayerInfoRequest) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerInfoRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerInfoRequest) GetGameModePreference() string {
	if x != nil {
		return x.GameModePreference
	}
	return ""
}

func (x *PlayerInfoRequest) GetVectorClock() map[string]int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type QueuePlayerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 0 = ok, 1 = error
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	VectorClock   map[string]int32       `protobuf:"bytes,3,rep,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueuePlayerResponse) Reset() {
	*x = QueuePlayerResponse{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuePlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePlayerResponse) ProtoMessage() {}

func (x *QueuePlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePlayerResponse.ProtoReflect.Descriptor instead.
func (*QueuePlayerResponse) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{1}
}

func (x *QueuePlayerResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *QueuePlayerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueuePlayerResponse) GetVectorClock() map[string]int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type PlayerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerStatusRequest) Reset() {
	*x = PlayerStatusRequest{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusRequest) ProtoMessage() {}

func (x *PlayerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusRequest.ProtoReflect.Descriptor instead.
func (*PlayerStatusRequest) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerStatusRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type PlayerStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // IDLE, IN_QUEUE, IN_MATCH
	MatchId       string                 `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	ServerAddress string                 `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"` // Servidor de partida
	VectorClock   map[string]int32       `protobuf:"bytes,4,rep,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerStatusResponse) Reset() {
	*x = PlayerStatusResponse{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusResponse) ProtoMessage() {}

func (x *PlayerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusResponse.ProtoReflect.Descriptor instead.
func (*PlayerStatusResponse) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PlayerStatusResponse) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *PlayerStatusResponse) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *PlayerStatusResponse) GetVectorClock() map[string]int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type CancelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	VectorClock   map[string]int32       `protobuf:"bytes,2,rep,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelRequest) Reset() {
	*x = CancelRequest{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequest) ProtoMessage() {}

func (x *CancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequest.ProtoReflect.Descriptor instead.
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{4}
}

func (x *CancelRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *CancelRequest) GetVectorClock() map[string]int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type CancelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	VectorClock   map[string]int32       `protobuf:"bytes,3,rep,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelResponse) Reset() {
	*x = CancelResponse{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelResponse) ProtoMessage() {}

func (x *CancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelResponse.ProtoReflect.Descriptor instead.
func (*CancelResponse) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{5}
}

func (x *CancelResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CancelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CancelResponse) GetVectorClock() map[string]int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

// Mensajes del administrador
type AdminRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminRequest) Reset() {
	*x = AdminRequest{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRequest) ProtoMessage() {}

func (x *AdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRequest.ProtoReflect.Descriptor instead.
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{6}
}

type SystemStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []*ServerState         `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	Players       []*PlayerQueueEntry    `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemStatusResponse) Reset() {
	*x = SystemStatusResponse{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusResponse) ProtoMessage() {}

func (x *SystemStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusResponse.ProtoReflect.Descriptor instead.
func (*SystemStatusResponse) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{7}
}

func (x *SystemStatusResponse) GetServers() []*ServerState {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *SystemStatusResponse) GetPlayers() []*PlayerQueueEntry {
	if x != nil {
		return x.Players
	}
	return nil
}

type ServerState struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status         string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Address        string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	CurrentMatchId int32                  `protobuf:"varint,4,opt,name=current_match_id,json=currentMatchId,proto3" json:"current_match_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ServerState) Reset() {
	*x = ServerState{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerState) ProtoMessage() {}

func (x *ServerState) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerState.ProtoReflect.Descriptor instead.
func (*ServerState) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{8}
}

func (x *ServerState) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServerState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ServerState) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServerState) GetCurrentMatchId() int32 {
	if x != nil {
		return x.CurrentMatchId
	}
	return 0
}

type PlayerQueueEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TimeInQueue   int64                  `protobuf:"varint,2,opt,name=time_in_queue,json=timeInQueue,proto3" json:"time_in_queue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerQueueEntry) Reset() {
	*x = PlayerQueueEntry{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerQueueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueueEntry) ProtoMessage() {}

func (x *PlayerQueueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueueEntry.ProtoReflect.Descriptor instead.
func (*PlayerQueueEntry) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerQueueEntry) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerQueueEntry) GetTimeInQueue() int64 {
	if x != nil {
		return x.TimeInQueue
	}
	return 0
}

type AdminUpdateServerRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ServerId        int32                  `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	NewForcedStatus string                 `protobuf:"bytes,2,opt,name=new_forced_status,json=newForcedStatus,proto3" json:"new_forced_status,omitempty"` // "AVAILABLE", "DOWN"
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AdminUpdateServerRequest) Reset() {
	*x = AdminUpdateServerRequest{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminUpdateServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateServerRequest) ProtoMessage() {}

func (x *AdminUpdateServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateServerRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateServerRequest) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{10}
}

func (x *AdminUpdateServerRequest) GetServerId() int32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *AdminUpdateServerRequest) GetNewForcedStatus() string {
	if x != nil {
		return x.NewForcedStatus
	}
	return ""
}

type AdminUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminUpdateResponse) Reset() {
	*x = AdminUpdateResponse{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateResponse) ProtoMessage() {}

func (x *AdminUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateResponse) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{11}
}

func (x *AdminUpdateResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *AdminUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Mensajes para Game Servers
type ServerStatusUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      int32                  `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	NewStatus     string                 `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"` // "AVAILABLE", "BUSY", "DOWN"
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatusUpdateRequest) Reset() {
	*x = ServerStatusUpdateRequest{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusUpdateRequest) ProtoMessage() {}

func (x *ServerStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*ServerStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{12}
}

func (x *ServerStatusUpdateRequest) GetServerId() int32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *ServerStatusUpdateRequest) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ServerStatusUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 0: ok, 1: error
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatusUpdateResponse) Reset() {
	*x = ServerStatusUpdateResponse{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusUpdateResponse) ProtoMessage() {}

func (x *ServerStatusUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusUpdateResponse.ProtoReflect.Descriptor instead.
func (*ServerStatusUpdateResponse) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{13}
}

func (x *ServerStatusUpdateResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type PlayerStateProto struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PlayerId           string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	State              string                 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"` // IDLE, IN_QUEUE, RESERVED, IN_MATCH
	MatchId            string                 `protobuf:"bytes,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	ServerAddr         string                 `protobuf:"bytes,4,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	VectorClock        map[string]int32       `protobuf:"bytes,5,rep,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	GamePreference     string                 `protobuf:"bytes,6,opt,name=game_preference,json=gamePreference,proto3" json:"game_preference,omitempty"`
	QueueEnterTimeUnix int64                  `protobuf:"varint,7,opt,name=queue_enter_time_unix,json=queueEnterTimeUnix,proto3" json:"queue_enter_time_unix,omitempty"` // timestamp Unix en segundos
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PlayerStateProto) Reset() {
	*x = PlayerStateProto{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStateProto) ProtoMessage() {}

func (x *PlayerStateProto) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStateProto.ProtoReflect.Descriptor instead.
func (*PlayerStateProto) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{14}
}

func (x *PlayerStateProto) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerStateProto) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PlayerStateProto) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *PlayerStateProto) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

func (x *PlayerStateProto) GetVectorClock() map[string]int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

func (x *PlayerStateProto) GetGamePreference() string {
	if x != nil {
		return x.GamePreference
	}
	return ""
}

func (x *PlayerStateProto) GetQueueEnterTimeUnix() int64 {
	if x != nil {
		return x.QueueEnterTimeUnix
	}
	return 0
}

type GameServerStateProto struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address        string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Status         string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                       // AVAILABLE, BUSY, DOWN
	LastCheckUnix  int64                  `protobuf:"varint,4,opt,name=last_check_unix,json=lastCheckUnix,proto3" json:"last_check_unix,omitempty"` // timestamp Unix en segundos
	CurrentMatchId string                 `protobuf:"bytes,5,opt,name=current_match_id,json=currentMatchId,proto3" json:"current_match_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GameServerStateProto) Reset() {
	*x = GameServerStateProto{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameServerStateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerStateProto) ProtoMessage() {}

func (x *GameServerStateProto) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerStateProto.ProtoReflect.Descriptor instead.
func (*GameServerStateProto) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{15}
}

func (x *GameServerStateProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GameServerStateProto) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GameServerStateProto) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GameServerStateProto) GetLastCheckUnix() int64 {
	if x != nil {
		return x.LastCheckUnix
	}
	return 0
}

func (x *GameServerStateProto) GetCurrentMatchId() string {
	if x != nil {
		return x.CurrentMatchId
	}
	return ""
}

type StateSyncRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Players       map[string]*PlayerStateProto     `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Servers       map[string]*GameServerStateProto `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	VectorClock   map[string]int32                 `protobuf:"bytes,3,rep,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	NodeId        string                           `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // Identificador del nodo que envía el estado
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateSyncRequest) Reset() {
	*x = StateSyncRequest{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateSyncRequest) ProtoMessage() {}

func (x *StateSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateSyncRequest.ProtoReflect.Descriptor instead.
func (*StateSyncRequest) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{16}
}

func (x *StateSyncRequest) GetPlayers() map[string]*PlayerStateProto {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *StateSyncRequest) GetServers() map[string]*GameServerStateProto {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *StateSyncRequest) GetVectorClock() map[string]int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

func (x *StateSyncRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type StateSyncResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateSyncResponse) Reset() {
	*x = StateSyncResponse{}
	mi := &file_player_proto_matchmaker_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateSyncResponse) ProtoMessage() {}

func (x *StateSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_player_proto_matchmaker_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateSyncResponse.ProtoReflect.Descriptor instead.
func (*StateSyncResponse) Descriptor() ([]byte, []int) {
	return file_player_proto_matchmaker_proto_rawDescGZIP(), []int{17}
}

func (x *StateSyncResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *StateSyncResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_player_proto_matchmaker_proto protoreflect.FileDescriptor

const file_player_proto_matchmaker_proto_rawDesc = "" +
	"\n" +
	"\x1dplayer/proto/matchmaker.proto\x12\n" +
	"matchmaker\"\xf5\x01\n" +
	"\x11PlayerInfoRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x120\n" +
	"\x14game_mode_preference\x18\x02 \x01(\tR\x12gameModePreference\x12Q\n" +
	"\fvector_clock\x18\x03 \x03(\v2..matchmaker.PlayerInfoRequest.VectorClockEntryR\vvectorClock\x1a>\n" +
	"\x10VectorClockEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xe5\x01\n" +
	"\x13QueuePlayerResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12S\n" +
	"\fvector_clock\x18\x03 \x03(\v20.matchmaker.QueuePlayerResponse.VectorClockEntryR\vvectorClock\x1a>\n" +
	"\x10VectorClockEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"2\n" +
	"\x13PlayerStatusRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\"\x86\x02\n" +
	"\x14PlayerStatusResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x19\n" +
	"\bmatch_id\x18\x02 \x01(\tR\amatchId\x12%\n" +
	"\x0eserver_address\x18\x03 \x01(\tR\rserverAddress\x12T\n" +
	"\fvector_clock\x18\x04 \x03(\v21.matchmaker.PlayerStatusResponse.VectorClockEntryR\vvectorClock\x1a>\n" +
	"\x10VectorClockEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xbb\x01\n" +
	"\rCancelRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12M\n" +
	"\fvector_clock\x18\x02 \x03(\v2*.matchmaker.CancelRequest.VectorClockEntryR\vvectorClock\x1a>\n" +
	"\x10VectorClockEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xdb\x01\n" +
	"\x0eCancelResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12N\n" +
	"\fvector_clock\x18\x03 \x03(\v2+.matchmaker.CancelResponse.VectorClockEntryR\vvectorClock\x1a>\n" +
	"\x10VectorClockEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x0e\n" +
	"\fAdminRequest\"\x81\x01\n" +
	"\x14SystemStatusResponse\x121\n" +
	"\aservers\x18\x01 \x03(\v2\x17.matchmaker.ServerStateR\aservers\x126\n" +
	"\aplayers\x18\x02 \x03(\v2\x1c.matchmaker.PlayerQueueEntryR\aplayers\"y\n" +
	"\vServerState\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12(\n" +
	"\x10current_match_id\x18\x04 \x01(\x05R\x0ecurrentMatchId\"S\n" +
	"\x10PlayerQueueEntry\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\"\n" +
	"\rtime_in_queue\x18\x02 \x01(\x03R\vtimeInQueue\"c\n" +
	"\x18AdminUpdateServerRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\x05R\bserverId\x12*\n" +
	"\x11new_forced_status\x18\x02 \x01(\tR\x0fnewForcedStatus\"P\n" +
	"\x13AdminUpdateResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"q\n" +
	"\x19ServerStatusUpdateRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\x05R\bserverId\x12\x1d\n" +
	"\n" +
	"new_status\x18\x02 \x01(\tR\tnewStatus\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\"=\n" +
	"\x1aServerStatusUpdateResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\"\xef\x02\n" +
	"\x10PlayerStateProto\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x14\n" +
	"\x05state\x18\x02 \x01(\tR\x05state\x12\x19\n" +
	"\bmatch_id\x18\x03 \x01(\tR\amatchId\x12\x1f\n" +
	"\vserver_addr\x18\x04 \x01(\tR\n" +
	"serverAddr\x12P\n" +
	"\fvector_clock\x18\x05 \x03(\v2-.matchmaker.PlayerStateProto.VectorClockEntryR\vvectorClock\x12'\n" +
	"\x0fgame_preference\x18\x06 \x01(\tR\x0egamePreference\x121\n" +
	"\x15queue_enter_time_unix\x18\a \x01(\x03R\x12queueEnterTimeUnix\x1a>\n" +
	"\x10VectorClockEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xaa\x01\n" +
	"\x14GameServerStateProto\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12&\n" +
	"\x0flast_check_unix\x18\x04 \x01(\x03R\rlastCheckUnix\x12(\n" +
	"\x10current_match_id\x18\x05 \x01(\tR\x0ecurrentMatchId\"\xff\x03\n" +
	"\x10StateSyncRequest\x12C\n" +
	"\aplayers\x18\x01 \x03(\v2).matchmaker.StateSyncRequest.PlayersEntryR\aplayers\x12C\n" +
	"\aservers\x18\x02 \x03(\v2).matchmaker.StateSyncRequest.ServersEntryR\aservers\x12P\n" +
	"\fvector_clock\x18\x03 \x03(\v2-.matchmaker.StateSyncRequest.VectorClockEntryR\vvectorClock\x12\x17\n" +
	"\anode_id\x18\x04 \x01(\tR\x06nodeId\x1aX\n" +
	"\fPlayersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.matchmaker.PlayerStateProtoR\x05value:\x028\x01\x1a\\\n" +
	"\fServersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .matchmaker.GameServerStateProtoR\x05value:\x028\x01\x1a>\n" +
	"\x10VectorClockEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"N\n" +
	"\x11StateSyncResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage2\xe8\x04\n" +
	"\x11MatchmakerService\x12M\n" +
	"\vQueuePlayer\x12\x1d.matchmaker.PlayerInfoRequest\x1a\x1f.matchmaker.QueuePlayerResponse\x12T\n" +
	"\x0fGetPlayerStatus\x12\x1f.matchmaker.PlayerStatusRequest\x1a .matchmaker.PlayerStatusResponse\x12J\n" +
	"\x11CancelMatchmaking\x12\x19.matchmaker.CancelRequest\x1a\x1a.matchmaker.CancelResponse\x12R\n" +
	"\x14AdminGetSystemStatus\x12\x18.matchmaker.AdminRequest\x1a .matchmaker.SystemStatusResponse\x12_\n" +
	"\x16AdminUpdateServerState\x12$.matchmaker.AdminUpdateServerRequest\x1a\x1f.matchmaker.AdminUpdateResponse\x12c\n" +
	"\x12UpdateServerStatus\x12%.matchmaker.ServerStatusUpdateRequest\x1a&.matchmaker.ServerStatusUpdateResponse\x12H\n" +
	"\tSyncState\x12\x1c.matchmaker.StateSyncRequest\x1a\x1d.matchmaker.StateSyncResponseB\x17Z\x15player/proto/compiledb\x06proto3"

var (
	file_player_proto_matchmaker_proto_rawDescOnce sync.Once
	file_player_proto_matchmaker_proto_rawDescData []byte
)

func file_player_proto_matchmaker_proto_rawDescGZIP() []byte {
	file_player_proto_matchmaker_proto_rawDescOnce.Do(func() {
		file_player_proto_matchmaker_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_player_proto_matchmaker_proto_rawDesc), len(file_player_proto_matchmaker_proto_rawDesc)))
	})
	return file_player_proto_matchmaker_proto_rawDescData
}

var file_player_proto_matchmaker_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_player_proto_matchmaker_proto_goTypes = []any{
	(*PlayerInfoRequest)(nil),          // 0: matchmaker.PlayerInfoRequest
	(*QueuePlayerResponse)(nil),        // 1: matchmaker.QueuePlayerResponse
	(*PlayerStatusRequest)(nil),        // 2: matchmaker.PlayerStatusRequest
	(*PlayerStatusResponse)(nil),       // 3: matchmaker.PlayerStatusResponse
	(*CancelRequest)(nil),              // 4: matchmaker.CancelRequest
	(*CancelResponse)(nil),             // 5: matchmaker.CancelResponse
	(*AdminRequest)(nil),               // 6: matchmaker.AdminRequest
	(*SystemStatusResponse)(nil),       // 7: matchmaker.SystemStatusResponse
	(*ServerState)(nil),                // 8: matchmaker.ServerState
	(*PlayerQueueEntry)(nil),           // 9: matchmaker.PlayerQueueEntry
	(*AdminUpdateServerRequest)(nil),   // 10: matchmaker.AdminUpdateServerRequest
	(*AdminUpdateResponse)(nil),        // 11: matchmaker.AdminUpdateResponse
	(*ServerStatusUpdateRequest)(nil),  // 12: matchmaker.ServerStatusUpdateRequest
	(*ServerStatusUpdateResponse)(nil), // 13: matchmaker.ServerStatusUpdateResponse
	(*PlayerStateProto)(nil),           // 14: matchmaker.PlayerStateProto
	(*GameServerStateProto)(nil),       // 15: matchmaker.GameServerStateProto
	(*StateSyncRequest)(nil),           // 16: matchmaker.StateSyncRequest
	(*StateSyncResponse)(nil),          // 17: matchmaker.StateSyncResponse
	nil,                                // 18: matchmaker.PlayerInfoRequest.VectorClockEntry
	nil,                                // 19: matchmaker.QueuePlayerResponse.VectorClockEntry
	nil,                                // 20: matchmaker.PlayerStatusResponse.VectorClockEntry
	nil,                                // 21: matchmaker.CancelRequest.VectorClockEntry
	nil,                                // 22: matchmaker.CancelResponse.VectorClockEntry
	nil,                                // 23: matchmaker.PlayerStateProto.VectorClockEntry
	nil,                                // 24: matchmaker.StateSyncRequest.PlayersEntry
	nil,                                // 25: matchmaker.StateSyncRequest.ServersEntry
	nil,                                // 26: matchmaker.StateSyncRequest.VectorClockEntry
}
var file_player_proto_matchmaker_proto_depIdxs = []int32{
	18, // 0: matchmaker.PlayerInfoRequest.vector_clock:type_name -> matchmaker.PlayerInfoRequest.VectorClockEntry
	19, // 1: matchmaker.QueuePlayerResponse.vector_clock:type_name -> matchmaker.QueuePlayerResponse.VectorClockEntry
	20, // 2: matchmaker.PlayerStatusResponse.vector_clock:type_name -> matchmaker.PlayerStatusResponse.VectorClockEntry
	21, // 3: matchmaker.CancelRequest.vector_clock:type_name -> matchmaker.CancelRequest.VectorClockEntry
	22, // 4: matchmaker.CancelResponse.vector_clock:type_name -> matchmaker.CancelResponse.VectorClockEntry
	8,  // 5: matchmaker.SystemStatusResponse.servers:type_name -> matchmaker.ServerState
	9,  // 6: matchmaker.SystemStatusResponse.players:type_name -> matchmaker.PlayerQueueEntry
	23, // 7: matchmaker.PlayerStateProto.vector_clock:type_name -> matchmaker.PlayerStateProto.VectorClockEntry
	24, // 8: matchmaker.StateSyncRequest.players:type_name -> matchmaker.StateSyncRequest.PlayersEntry
	25, // 9: matchmaker.StateSyncRequest.servers:type_name -> matchmaker.StateSyncRequest.ServersEntry
	26, // 10: matchmaker.StateSyncRequest.vector_clock:type_name -> matchmaker.StateSyncRequest.VectorClockEntry
	14, // 11: matchmaker.StateSyncRequest.PlayersEntry.value:type_name -> matchmaker.PlayerStateProto
	15, // 12: matchmaker.StateSyncRequest.ServersEntry.value:type_name -> matchmaker.GameServerStateProto
	0,  // 13: matchmaker.MatchmakerService.QueuePlayer:input_type -> matchmaker.PlayerInfoRequest
	2,  // 14: matchmaker.MatchmakerService.GetPlayerStatus:input_type -> matchmaker.PlayerStatusRequest
	4,  // 15: matchmaker.MatchmakerService.CancelMatchmaking:input_type -> matchmaker.CancelRequest
	6,  // 16: matchmaker.MatchmakerService.AdminGetSystemStatus:input_type -> matchmaker.AdminRequest
	10, // 17: matchmaker.MatchmakerService.AdminUpdateServerState:input_type -> matchmaker.AdminUpdateServerRequest
	12, // 18: matchmaker.MatchmakerService.UpdateServerStatus:input_type -> matchmaker.ServerStatusUpdateRequest
	16, // 19: matchmaker.MatchmakerService.SyncState:input_type -> matchmaker.StateSyncRequest
	1,  // 20: matchmaker.MatchmakerService.QueuePlayer:output_type -> matchmaker.QueuePlayerResponse
	3,  // 21: matchmaker.MatchmakerService.GetPlayerStatus:output_type -> matchmaker.PlayerStatusResponse
	5,  // 22: matchmaker.MatchmakerService.CancelMatchmaking:output_type -> matchmaker.CancelResponse
	7,  // 23: matchmaker.MatchmakerService.AdminGetSystemStatus:output_type -> matchmaker.SystemStatusResponse
	11, // 24: matchmaker.MatchmakerService.AdminUpdateServerState:output_type -> matchmaker.AdminUpdateResponse
	13, // 25: matchmaker.MatchmakerService.UpdateServerStatus:output_type -> matchmaker.ServerStatusUpdateResponse
	17, // 26: matchmaker.MatchmakerService.SyncState:output_type -> matchmaker.StateSyncResponse
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_player_proto_matchmaker_proto_init() }
func file_player_proto_matchmaker_proto_init() {
	if File_player_proto_matchmaker_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_player_proto_matchmaker_proto_rawDesc), len(file_player_proto_matchmaker_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_player_proto_matchmaker_proto_goTypes,
		DependencyIndexes: file_player_proto_matchmaker_proto_depIdxs,
		MessageInfos:      file_player_proto_matchmaker_proto_msgTypes,
	}.Build()
	File_player_proto_matchmaker_proto = out.File
	file_player_proto_matchmaker_proto_goTypes = nil
	file_player_proto_matchmaker_proto_depIdxs = nil
}
