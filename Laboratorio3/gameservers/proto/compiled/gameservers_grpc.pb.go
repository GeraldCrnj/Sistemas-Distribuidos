// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: gameservers/proto/gameservers.proto

package compiled

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameServersService_AssignMatch_FullMethodName = "/gameserversserver.GameServersService/AssignMatch"
	GameServersService_PingServer_FullMethodName  = "/gameserversserver.GameServersService/PingServer"
)

// GameServersServiceClient is the client API for GameServersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServersServiceClient interface {
	// Matchmaker
	AssignMatch(ctx context.Context, in *AssignMatchRequest, opts ...grpc.CallOption) (*AssignMatchResponse, error)
	PingServer(ctx context.Context, in *ServerId, opts ...grpc.CallOption) (*PingResponse, error)
}

type gameServersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServersServiceClient(cc grpc.ClientConnInterface) GameServersServiceClient {
	return &gameServersServiceClient{cc}
}

func (c *gameServersServiceClient) AssignMatch(ctx context.Context, in *AssignMatchRequest, opts ...grpc.CallOption) (*AssignMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignMatchResponse)
	err := c.cc.Invoke(ctx, GameServersService_AssignMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServersServiceClient) PingServer(ctx context.Context, in *ServerId, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, GameServersService_PingServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServersServiceServer is the server API for GameServersService service.
// All implementations must embed UnimplementedGameServersServiceServer
// for forward compatibility.
type GameServersServiceServer interface {
	// Matchmaker
	AssignMatch(context.Context, *AssignMatchRequest) (*AssignMatchResponse, error)
	PingServer(context.Context, *ServerId) (*PingResponse, error)
	mustEmbedUnimplementedGameServersServiceServer()
}

// UnimplementedGameServersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameServersServiceServer struct{}

func (UnimplementedGameServersServiceServer) AssignMatch(context.Context, *AssignMatchRequest) (*AssignMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignMatch not implemented")
}
func (UnimplementedGameServersServiceServer) PingServer(context.Context, *ServerId) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingServer not implemented")
}
func (UnimplementedGameServersServiceServer) mustEmbedUnimplementedGameServersServiceServer() {}
func (UnimplementedGameServersServiceServer) testEmbeddedByValue()                            {}

// UnsafeGameServersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServersServiceServer will
// result in compilation errors.
type UnsafeGameServersServiceServer interface {
	mustEmbedUnimplementedGameServersServiceServer()
}

func RegisterGameServersServiceServer(s grpc.ServiceRegistrar, srv GameServersServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameServersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameServersService_ServiceDesc, srv)
}

func _GameServersService_AssignMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServersServiceServer).AssignMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServersService_AssignMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServersServiceServer).AssignMatch(ctx, req.(*AssignMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServersService_PingServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServersServiceServer).PingServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServersService_PingServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServersServiceServer).PingServer(ctx, req.(*ServerId))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServersService_ServiceDesc is the grpc.ServiceDesc for GameServersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameserversserver.GameServersService",
	HandlerType: (*GameServersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignMatch",
			Handler:    _GameServersService_AssignMatch_Handler,
		},
		{
			MethodName: "PingServer",
			Handler:    _GameServersService_PingServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gameservers/proto/gameservers.proto",
}
